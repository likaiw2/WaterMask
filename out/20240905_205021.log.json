{"env_info": "sys.platform: linux\nPython: 3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA TITAN Xp\nCUDA_HOME: /home/liw324/miniconda3/envs/watermask\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nGCC: gcc (Ubuntu 7.5.0-6ubuntu2) 7.5.0\nPyTorch: 1.10.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: NO AVX\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu113\nOpenCV: 4.10.0\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.25.1+f6d6542", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='WaterRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=7,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='WaterMaskHead',\n            num_convs_gff=2,\n            num_convs_lcf=2,\n            image_patch_token=3,\n            graph_top_k=11,\n            num_heads_in_gat=1,\n            classes_num_in_stages=[7, 7, 1],\n            stage_output_mask_size=[14, 28, 56],\n            loss_cfg=dict(\n                type='LaplacianCrossEntropyLoss',\n                stage_lcf_loss_weight=[0.25, 0.65, 1],\n                boundary_width=3,\n                start_stage=2))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/UDW/'\nimg_norm_cfg = dict(\n    mean=[81.236, 113.761, 117.095], std=[60.598, 58.471, 62.821], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[81.236, 113.761, 117.095],\n        std=[60.598, 58.471, 62.821],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[81.236, 113.761, 117.095],\n                std=[60.598, 58.471, 62.821],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/UDW/annotations/train.json',\n        img_prefix='data/UDW/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[81.236, 113.761, 117.095],\n                std=[60.598, 58.471, 62.821],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/UDW/annotations/val.json',\n        img_prefix='data/UDW/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[81.236, 113.761, 117.095],\n                        std=[60.598, 58.471, 62.821],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/UDW/annotations/val.json',\n        img_prefix='data/UDW/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[81.236, 113.761, 117.095],\n                        std=[60.598, 58.471, 62.821],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['segm'], classwise=True, interval=3)\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=3)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = 'out'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 466156278, "exp_name": "water_r50_fpn_1x.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00025, "memory": 7579, "data_time": 0.0892, "loss_rpn_cls": 0.68811, "loss_rpn_bbox": 0.11185, "loss_cls": 2.0881, "acc": 32.97461, "loss_bbox": 0.02629, "loss_lcf": 38.95457, "loss": 41.86892, "grad_norm": 1045.09972, "time": 0.65329}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0005, "memory": 7613, "data_time": 0.03677, "loss_rpn_cls": 0.67197, "loss_rpn_bbox": 0.09703, "loss_cls": 0.40111, "acc": 98.20117, "loss_bbox": 0.01611, "loss_lcf": 1.64285, "loss": 2.82908, "grad_norm": 35.53952, "time": 0.60182}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00075, "memory": 7625, "data_time": 0.02422, "loss_rpn_cls": 0.53668, "loss_rpn_bbox": 0.07972, "loss_cls": 0.27204, "acc": 95.81445, "loss_bbox": 0.14133, "loss_lcf": 1.42584, "loss": 2.45562, "grad_norm": 18.22997, "time": 0.63802}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 7680, "data_time": 0.02695, "loss_rpn_cls": 0.29512, "loss_rpn_bbox": 0.0861, "loss_cls": 0.30092, "acc": 94.50391, "loss_bbox": 0.19212, "loss_lcf": 1.32373, "loss": 2.198, "grad_norm": 10.98778, "time": 0.64386}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00125, "memory": 7680, "data_time": 0.0235, "loss_rpn_cls": 0.19806, "loss_rpn_bbox": 0.07786, "loss_cls": 0.29904, "acc": 93.91406, "loss_bbox": 0.22602, "loss_lcf": 1.23961, "loss": 2.04058, "grad_norm": 8.64534, "time": 0.68124}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0015, "memory": 7680, "data_time": 0.02711, "loss_rpn_cls": 0.21364, "loss_rpn_bbox": 0.08651, "loss_cls": 0.25917, "acc": 94.7832, "loss_bbox": 0.18589, "loss_lcf": 1.24772, "loss": 1.99293, "grad_norm": 9.91883, "time": 0.65673}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00175, "memory": 7709, "data_time": 0.02211, "loss_rpn_cls": 0.16458, "loss_rpn_bbox": 0.07248, "loss_cls": 0.29807, "acc": 94.00781, "loss_bbox": 0.22739, "loss_lcf": 1.19136, "loss": 1.95387, "grad_norm": 9.02895, "time": 0.66917}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.002, "memory": 7870, "data_time": 0.03126, "loss_rpn_cls": 0.20921, "loss_rpn_bbox": 0.09666, "loss_cls": 0.33858, "acc": 92.47461, "loss_bbox": 0.27322, "loss_lcf": 1.13552, "loss": 2.05319, "grad_norm": 7.01955, "time": 0.69467}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00225, "memory": 7940, "data_time": 0.02061, "loss_rpn_cls": 0.14932, "loss_rpn_bbox": 0.08095, "loss_cls": 0.34147, "acc": 92.12109, "loss_bbox": 0.30626, "loss_lcf": 1.08798, "loss": 1.96598, "grad_norm": 6.81606, "time": 0.705}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0025, "memory": 7940, "data_time": 0.02476, "loss_rpn_cls": 0.13239, "loss_rpn_bbox": 0.08115, "loss_cls": 0.34417, "acc": 92.00586, "loss_bbox": 0.30837, "loss_lcf": 1.09599, "loss": 1.96208, "grad_norm": 6.78404, "time": 0.71098}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0025, "memory": 7940, "data_time": 0.03512, "loss_rpn_cls": 0.13851, "loss_rpn_bbox": 0.08406, "loss_cls": 0.38078, "acc": 90.81641, "loss_bbox": 0.35441, "loss_lcf": 1.05815, "loss": 2.01591, "grad_norm": 6.45997, "time": 0.71605}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0025, "memory": 7940, "data_time": 0.02433, "loss_rpn_cls": 0.11937, "loss_rpn_bbox": 0.07244, "loss_cls": 0.36353, "acc": 90.75781, "loss_bbox": 0.3603, "loss_lcf": 1.03007, "loss": 1.94571, "grad_norm": 5.24223, "time": 0.71339}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0025, "memory": 8360, "data_time": 0.03543, "loss_rpn_cls": 0.14191, "loss_rpn_bbox": 0.10052, "loss_cls": 0.40107, "acc": 90.01758, "loss_bbox": 0.37952, "loss_lcf": 1.01882, "loss": 2.04183, "grad_norm": 6.00845, "time": 0.75374}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0025, "memory": 8512, "data_time": 0.02782, "loss_rpn_cls": 0.10652, "loss_rpn_bbox": 0.08916, "loss_cls": 0.3779, "acc": 89.61523, "loss_bbox": 0.4028, "loss_lcf": 1.01959, "loss": 1.99597, "grad_norm": 5.3337, "time": 0.72668}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0025, "memory": 8512, "data_time": 0.02654, "loss_rpn_cls": 0.1061, "loss_rpn_bbox": 0.08453, "loss_cls": 0.3657, "acc": 91.13672, "loss_bbox": 0.34006, "loss_lcf": 1.03656, "loss": 1.93295, "grad_norm": 5.59761, "time": 0.71186}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0025, "memory": 8512, "data_time": 0.04631, "loss_rpn_cls": 0.09952, "loss_rpn_bbox": 0.07952, "loss_cls": 0.34997, "acc": 91.11328, "loss_bbox": 0.34177, "loss_lcf": 1.04359, "loss": 1.91438, "grad_norm": 6.35778, "time": 0.73016}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0025, "memory": 8885, "data_time": 0.02383, "loss_rpn_cls": 0.08597, "loss_rpn_bbox": 0.07379, "loss_cls": 0.33957, "acc": 90.75391, "loss_bbox": 0.3482, "loss_lcf": 0.95798, "loss": 1.8055, "grad_norm": 5.99097, "time": 0.71108}
